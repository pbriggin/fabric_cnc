#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
G-code generator for Fabric CNC machine.
Generates G-code compatible with the redesigned motor control system.
"""

import logging
import math
from dataclasses import dataclass
from typing import List, Optional, Dict, Any, TextIO
from pathlib import Path

from config_manager import config_manager
from .motion_planner import ToolpathPoint, ToolpathType

logger = logging.getLogger(__name__)

@dataclass
class GCodeSettings:
    """Settings for G-code generation."""
    feed_rate: float = 100.0
    z_up: float = 5.0
    z_down: float = -1.0
    units: str = "mm"
    precision: int = 3
    include_comments: bool = True
    include_line_numbers: bool = True

class GCodeGenerator:
    """G-code generator for Fabric CNC machine."""
    
    def __init__(self, settings: Optional[GCodeSettings] = None):
        """Initialize G-code generator.
        
        Args:
            settings: G-code generation settings
        """
        self.settings = settings or GCodeSettings()
        self.line_number = 0
        
        # Machine configuration
        self.machine_config = config_manager.machine_config
        
        logger.info("G-code generator initialized")
    
    def generate_from_toolpath(
        self,
        toolpath: List[ToolpathPoint],
        output_file: Optional[Path] = None
    ) -> str:
        """Generate G-code from a toolpath.
        
        Args:
            toolpath: List of toolpath points
            output_file: Optional output file path
            
        Returns:
            Generated G-code as string
        """
        gcode_lines = []
        
        # Add header
        gcode_lines.extend(self._generate_header())
        
        # Add toolpath
        gcode_lines.extend(self._generate_toolpath_gcode(toolpath))
        
        # Add footer
        gcode_lines.extend(self._generate_footer())
        
        # Combine lines
        gcode = '\n'.join(gcode_lines)
        
        # Write to file if specified
        if output_file:
            with open(output_file, 'w') as f:
                f.write(gcode)
            logger.info(f"G-code written to {output_file}")
        
        return gcode
    
    def _generate_header(self) -> List[str]:
        """Generate G-code header."""
        lines = []
        
        if self.settings.include_comments:
            lines.append(f"; Fabric CNC G-code")
            lines.append(f"; Machine: {self.machine_config.name}")
            lines.append(f"; Units: {self.settings.units}")
            lines.append(f"; Generated by Fabric CNC")
            lines.append("")
        
        # Set units
        if self.settings.units.lower() == "mm":
            lines.append("G21 ; Set units to millimeters")
        else:
            lines.append("G20 ; Set units to inches")
        
        # Set absolute positioning
        lines.append("G90 ; Set absolute positioning")
        
        # Set feed rate mode
        lines.append("G94 ; Set feed rate mode to units per minute")
        
        # Initialize position
        lines.append("G28 ; Home all axes")
        lines.append("G0 Z5 ; Move to safe Z height")
        
        lines.append("")
        return lines
    
    def _generate_toolpath_gcode(self, toolpath: List[ToolpathPoint]) -> List[str]:
        """Generate G-code for toolpath."""
        lines = []
        
        if self.settings.include_comments:
            lines.append("; Toolpath execution")
            lines.append("")
        
        current_z = self.settings.z_up
        current_tool_down = False
        
        for i, point in enumerate(toolpath):
            # Handle tool state changes
            if point.tool_down and not current_tool_down:
                # Tool down
                lines.append(f"G1 Z{self.settings.z_down:.{self.settings.precision}f} F{self.settings.feed_rate:.1f} ; Tool down")
                current_tool_down = True
                current_z = self.settings.z_down
            elif not point.tool_down and current_tool_down:
                # Tool up
                lines.append(f"G1 Z{self.settings.z_up:.{self.settings.precision}f} F{self.settings.feed_rate:.1f} ; Tool up")
                current_tool_down = False
                current_z = self.settings.z_up
            
            # Generate movement command
            if point.tool_down:
                # Cutting movement
                lines.append(self._generate_cutting_move(point))
            else:
                # Rapid movement
                lines.append(self._generate_rapid_move(point))
        
        # Ensure tool is up at the end
        if current_tool_down:
            lines.append(f"G1 Z{self.settings.z_up:.{self.settings.precision}f} F{self.settings.feed_rate:.1f} ; Tool up")
        
        return lines
    
    def _generate_cutting_move(self, point: ToolpathPoint) -> str:
        """Generate G1 (linear cutting) move."""
        line = f"G1 X{point.x:.{self.settings.precision}f} Y{point.y:.{self.settings.precision}f}"
        
        if abs(point.z - self.settings.z_down) > 0.001:
            line += f" Z{point.z:.{self.settings.precision}f}"
        
        if abs(point.a) > 0.001:
            line += f" A{point.a:.{self.settings.precision}f}"
        
        line += f" F{point.feed_rate:.1f}"
        
        if self.settings.include_line_numbers:
            self.line_number += 1
            line = f"N{self.line_number} {line}"
        
        return line
    
    def _generate_rapid_move(self, point: ToolpathPoint) -> str:
        """Generate G0 (rapid) move."""
        line = f"G0 X{point.x:.{self.settings.precision}f} Y{point.y:.{self.settings.precision}f}"
        
        if abs(point.z - self.settings.z_up) > 0.001:
            line += f" Z{point.z:.{self.settings.precision}f}"
        
        if abs(point.a) > 0.001:
            line += f" A{point.a:.{self.settings.precision}f}"
        
        if self.settings.include_line_numbers:
            self.line_number += 1
            line = f"N{self.line_number} {line}"
        
        return line
    
    def _generate_footer(self) -> List[str]:
        """Generate G-code footer."""
        lines = []
        
        if self.settings.include_comments:
            lines.append("")
            lines.append("; End of program")
        
        # Return to home position
        lines.append("G28 ; Home all axes")
        
        # Program end
        lines.append("M2 ; End of program")
        
        return lines
    
    def generate_circle_gcode(
        self,
        center_x: float,
        center_y: float,
        radius: float,
        start_angle: float = 0,
        end_angle: float = 360,
        clockwise: bool = True,
        output_file: Optional[Path] = None
    ) -> str:
        """Generate G-code for a circle.
        
        Args:
            center_x: X coordinate of circle center
            center_y: Y coordinate of circle center
            radius: Circle radius
            start_angle: Starting angle in degrees
            end_angle: Ending angle in degrees
            clockwise: True for clockwise, False for counter-clockwise
            output_file: Optional output file path
            
        Returns:
            Generated G-code as string
        """
        # Convert angles to radians
        start_rad = math.radians(start_angle)
        end_rad = math.radians(end_angle)
        
        # Generate points along the circle
        num_points = max(32, int(2 * math.pi * radius / 1.0))  # 1mm spacing
        angle_step = (end_rad - start_rad) / num_points
        
        if not clockwise:
            angle_step = -angle_step
        
        toolpath = []
        
        for i in range(num_points + 1):
            angle = start_rad + i * angle_step
            x = center_x + radius * math.cos(angle)
            y = center_y + radius * math.sin(angle)
            
            point = ToolpathPoint(
                x=x, y=y, z=self.settings.z_down,
                a=0.0, feed_rate=self.settings.feed_rate,
                tool_down=True
            )
            toolpath.append(point)
        
        return self.generate_from_toolpath(toolpath, output_file)
    
    def generate_line_gcode(
        self,
        start_x: float,
        start_y: float,
        end_x: float,
        end_y: float,
        output_file: Optional[Path] = None
    ) -> str:
        """Generate G-code for a line.
        
        Args:
            start_x: Starting X coordinate
            start_y: Starting Y coordinate
            end_x: Ending X coordinate
            end_y: Ending Y coordinate
            output_file: Optional output file path
            
        Returns:
            Generated G-code as string
        """
        toolpath = [
            ToolpathPoint(
                x=start_x, y=start_y, z=self.settings.z_up,
                a=0.0, feed_rate=self.settings.feed_rate,
                tool_down=False
            ),
            ToolpathPoint(
                x=start_x, y=start_y, z=self.settings.z_down,
                a=0.0, feed_rate=self.settings.feed_rate,
                tool_down=True
            ),
            ToolpathPoint(
                x=end_x, y=end_y, z=self.settings.z_down,
                a=0.0, feed_rate=self.settings.feed_rate,
                tool_down=True
            ),
            ToolpathPoint(
                x=end_x, y=end_y, z=self.settings.z_up,
                a=0.0, feed_rate=self.settings.feed_rate,
                tool_down=False
            )
        ]
        
        return self.generate_from_toolpath(toolpath, output_file)
    
    def generate_rectangle_gcode(
        self,
        x: float,
        y: float,
        width: float,
        height: float,
        output_file: Optional[Path] = None
    ) -> str:
        """Generate G-code for a rectangle.
        
        Args:
            x: X coordinate of bottom-left corner
            y: Y coordinate of bottom-left corner
            width: Rectangle width
            height: Rectangle height
            output_file: Optional output file path
            
        Returns:
            Generated G-code as string
        """
        toolpath = [
            # Move to start position
            ToolpathPoint(x=x, y=y, z=self.settings.z_up, a=0.0, feed_rate=self.settings.feed_rate, tool_down=False),
            
            # Lower tool
            ToolpathPoint(x=x, y=y, z=self.settings.z_down, a=0.0, feed_rate=self.settings.feed_rate, tool_down=True),
            
            # Draw rectangle
            ToolpathPoint(x=x + width, y=y, z=self.settings.z_down, a=0.0, feed_rate=self.settings.feed_rate, tool_down=True),
            ToolpathPoint(x=x + width, y=y + height, z=self.settings.z_down, a=0.0, feed_rate=self.settings.feed_rate, tool_down=True),
            ToolpathPoint(x=x, y=y + height, z=self.settings.z_down, a=0.0, feed_rate=self.settings.feed_rate, tool_down=True),
            ToolpathPoint(x=x, y=y, z=self.settings.z_down, a=0.0, feed_rate=self.settings.feed_rate, tool_down=True),
            
            # Raise tool
            ToolpathPoint(x=x, y=y, z=self.settings.z_up, a=0.0, feed_rate=self.settings.feed_rate, tool_down=False)
        ]
        
        return self.generate_from_toolpath(toolpath, output_file) 